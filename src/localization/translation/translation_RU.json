{
  "editor": {
    "tooltips": {
      "copy": "копировать запрос",
      "format": "форматировать запрос",
      "execute": "выполнить запрос",
      "copied": "скопировано!",
      "refetch": "Обновить GraphQL схему",
      "docs": {
        "hide": "скрыть документацию",
        "show": "показать документацию"
      }
    },
    "tabs": {
      "variables": "переменные",
      "headers": "заголовки"
    }
  },
  "forms": {
    "errors": {
      "email": {
        "required": "Электронная почта обязательна",
        "pattern": "Введите корректную электронную почту"
      },
      "password": {
        "required": "Пароль обязателен",
        "minLength": "Пароль должен содержать не менее 8 символов",
        "validation": {
          "letter": "Пароль должен содержать хотя бы 1 букву",
          "digit": "Пароль должен содержать хотя бы 1 цифру",
          "special": "Пароль должен содержать хотя бы 1 специальный знак",
          "notCyrillic": "Пароль не должен содержать кириллицу"
        }
      },
      "common": "Ошибка"
    },
    "buttons": {
      "login": "Вход",
      "register": "Зарегистрироваться"
    },
    "fields": {
      "email": "Электронная почта",
      "password": "Пароль"
    },
    "label": {
      "noAccount": "У вас нет аккаунта?",
      "haveAccount": "Уже есть аккаунт?"
    },
    "title": {
      "login": "Авторизация",
      "register": "Регистрация"
    }
  },
  "header": {
    "buttons": {
      "logout": "Выйти",
      "language": "Сменить язык",
      "login": "Вход",
      "register": "Зарегистрироваться"
    }
  },
  "welcome": {
    "title": "Добро пожаловать на сайт GraphiQL!",
    "description": "Приложение для написания, проверки и тестирования запросов GraphQL.",
    "buttons": {
      "main": "Главная"
    },
    "accordions": {
      "title": "Особенности GraphiQL",
      "text": [
        {
          "id": 1,
          "title": "Что такое GraphQL?",
          "description": "GraphQL - это язык запросов и среда выполнения, которые позволяют определить структуру данных, которые вам нужны, и получить их из вашего API в одном запросе. Он обеспечивает более эффективный и гибкий способ взаимодействия с API по сравнению с традиционными REST API. С помощью GraphQL клиенты могут указывать точно те данные, которые им нужны, что уменьшает избыточность и недостаток данных."
        },
        {
          "id": 2,
          "title": "Зачем нужен GraphiQL?",
          "description": "GraphiQL - это веб-интерактивная среда разработки (IDE) для исследования GraphQL API. Он позволяет писать и тестировать запросы и мутации GraphQL, просматривать результаты и исследовать схему API. Это может быть особенно полезно во время разработки, так как он может помочь вам быстро итерироваться над вашим API и отлаживать проблемы."
        },
        {
          "id": 3,
          "title": "Как он создан?",
          "description": "GraphiQL создан с использованием React и TypeScript. React - это популярная библиотека JavaScript для создания пользовательских интерфейсов, а TypeScript - это типизированное надмножество JavaScript, которое обеспечивает лучшую инструментальную поддержку и проверку ошибок."
        },
        {
          "id": 4,
          "title": "С чего начать?",
          "description": "Чтобы начать использовать GraphiQL, вам нужно будет зарегистрироваться или авторизоваться. После того, как будет произведен вход в систему и произойдет подключение к API, вы сможете ознакомиться с документацией. В документации описаны все возможные запросы и обязательные параметры API, изучив которые вы сможете запрашивать и тестировать нужные вам данные для дальнейшего использования."
        }
      ]
    },
    "banners": {
      "title": "Как это работает?",
      "text": [
        {
          "id": 1,
          "title": "Генерация запросов",
          "description": "Автоматическая генерация запросов на основе схемы GraphQL для более быстрой разработки."
        },
        {
          "id": 2,
          "title": "Поддержка переменных и заголовков",
          "description": "Использование переменных и заголовков в запросах GraphQL для большей гибкости."
        },
        {
          "id": 3,
          "title": "Документация схемы",
          "description": "Автоматическая генерация документации для схемы GraphQL для улучшения понимания кода."
        },
        {
          "id": 4,
          "title": "Пользовательский интерфейс",
          "description": "Создание удобного интерфейса с возможностью выбора нескольких языков."
        }
      ]
    },
    "developers": {
      "title": "Наша команда",
      "team": [
        {
          "id": 1,
          "name": "Анастасия Бондаренко",
          "nickName": "krevetka87",
          "position": "Team Lead",
          "link": "https://github.com/krevetka87",
          "avatar": "https://avatars.githubusercontent.com/u/77237102?v=4"
        },
        {
          "id": 2,
          "name": "Дмитрий Иванов",
          "nickName": "metalknock",
          "position": "Front-End Developer",
          "link": "https://github.com/MetalKnock",
          "avatar": "https://avatars.githubusercontent.com/u/102481723?v=4"
        },
        {
          "id": 3,
          "name": "Сергей Федоров",
          "position": "Front-End Developer",
          "nickName": "dazmond-ru",
          "link": "https://github.com/Dazmond-ru",
          "avatar": "https://avatars.githubusercontent.com/u/60709379?v=4"
        }
      ]
    }
  },
  "docs": {
    "title": "Документация",
    "tools": {
      "root": "Корневые Типы",
      "fields": "Поля",
      "arguments": "Аргументы",
      "type": "Тип"
    },
    "description": "Схема GraphQL предоставляет корневой тип для каждого вида операций.",
    "loadError": "Ошибка загрузки схемы"
  },
  "notFound": {
    "message": "Страница не найдена",
    "link": "Вернутся на Начальную страницу"
  }
}
